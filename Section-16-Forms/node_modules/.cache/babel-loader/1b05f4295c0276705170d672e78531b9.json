{"ast":null,"code":"var _jsxFileName = \"/Users/kevinbenelli/Desktop/Section-16-Forms/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\n/*\nuseState vs. useRef\nuseState: \n1. If you need immediate validation (per keystroke)\n2. Reset entered input after submission / click\n\n\nuseRef:\n1. Just need last input value\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== \"\"; // This is run every re-render on each keystroke | First figure out if input is valid\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched; // infered value | then check if input has been touched\n\n  const enteredEmailIsValid = enteredEmail.trim().match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/); // regex credits: https://www.w3resource.com/javascript/form/email-validation.php\n\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    // evaluated each render instead of having to use a useEffect\n    formIsValid = true;\n  }\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value); // updates and then schedules so we need to use event.target.value in the if block\n  };\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true); // if input looses focused it has been touched\n  };\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const emailInputBlurHandler = () => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); // prevent http request being sent, if http request was sent it would reload the page and restart the react application. We would also loose state.\n\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(\"form submission handler\", enteredName);\n    setEnteredName(\"\");\n    setEnteredNameTouched(false);\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"disabled\",\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"nLPwRBBCARNBsLUgNqKrhA7EIUU=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["React","useState","useEffect","SimpleInput","props","enteredName","setEnteredName","enteredNameTouched","setEnteredNameTouched","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredNameIsValid","trim","nameInputIsInvalid","enteredEmailIsValid","match","emailInputIsInvalid","formIsValid","nameInputChangeHandler","event","target","value","nameInputBlurHandler","emailInputChangeHandler","emailInputBlurHandler","formSubmissionHandler","preventDefault","console","log","nameInputClasses","emailInputClasses"],"sources":["/Users/kevinbenelli/Desktop/Section-16-Forms/src/components/SimpleInput.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n/*\nuseState vs. useRef\nuseState: \n1. If you need immediate validation (per keystroke)\n2. Reset entered input after submission / click\n\n\nuseRef:\n1. Just need last input value\n*/\n\nconst SimpleInput = (props) => {\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  const enteredNameIsValid = enteredName.trim() !== \"\"; // This is run every re-render on each keystroke | First figure out if input is valid\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched; // infered value | then check if input has been touched\n\n  const enteredEmailIsValid = enteredEmail\n    .trim()\n    .match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/); // regex credits: https://www.w3resource.com/javascript/form/email-validation.php\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    // evaluated each render instead of having to use a useEffect\n    formIsValid = true;\n  }\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value); // updates and then schedules so we need to use event.target.value in the if block\n  };\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true); // if input looses focused it has been touched\n  };\n\n  const emailInputChangeHandler = (event) => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const emailInputBlurHandler = () => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault(); // prevent http request being sent, if http request was sent it would reload the page and restart the react application. We would also loose state.\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(\"form submission handler\", enteredName);\n    setEnteredName(\"\");\n    setEnteredNameTouched(false);\n\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty</p>\n        )}\n      </div>\n\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Your Email</label>\n        <input\n          type=\"text\"\n          id=\"email\"\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputIsInvalid && (\n          <p className=\"error-text\">Email must not be empty</p>\n        )}\n      </div>\n\n      <div className=\"form-actions\">\n        <button className=\"disabled\" disabled={!formIsValid}>\n          Submit\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}