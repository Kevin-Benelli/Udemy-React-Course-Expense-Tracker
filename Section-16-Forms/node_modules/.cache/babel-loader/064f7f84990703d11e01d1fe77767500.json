{"ast":null,"code":"var _jsxFileName = \"/Users/kevinbenelli/Desktop/Section-16-Forms/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n/*\nAuthor: Kevin Benelli\nuseState vs. useRef\nuseState: \n1. If you need immediate validation (per keystroke)\n2. Reset entered input after submission / click\n\n\nuseRef:\n1. Just need last input value\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredNameValue,\n    hasError: nameHasError,\n    valueChangeHandler: nameValueChangeHandler,\n    inputBlurHandler: nameInputBlurHandler\n  } = useInput(value => value.trim() !== \"\");\n  const {\n    value: emailValue,\n    hasError: emailHasValue,\n    valueChangeHandler: emailValueChangeHandler,\n    inputBlurHandler: emailInputBlurHandler\n  } = useInput(value => value.trim().match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/));\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== \"\"; // This is run every re-render on each keystroke | First figure out if input is valid\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched; // inferred value | then check if input has been touched\n\n  const enteredEmailIsValid = enteredEmail.trim().match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/); // regex credits: https://www.w3resource.com/javascript/form/email-validation.php\n\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    // evaluated each render instead of having to use a useEffect\n    formIsValid = true;\n  } // const nameInputChangeHandler = (event) => {\n  //   setEnteredName(event.target.value); // updates and then schedules so we need to use event.target.value in the if block\n  // };\n  // const nameInputBlurHandler = (event) => {\n  //   setEnteredNameTouched(true); // if input looses focused it has been touched\n  // };\n  // const emailInputChangeHandler = (event) => {\n  //   setEnteredEmail(event.target.value);\n  // };\n  // const emailInputBlurHandler = (event) => {\n  //   setEnteredEmailTouched(true);\n  // };\n\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); // prevent http request being sent, if http request was sent it would reload the page and restart the react application. We would also loose state.\n\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(\"form submission handler\", enteredName);\n    setEnteredName(\"\");\n    setEnteredNameTouched(false);\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameValueChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"email\",\n        onChange: emailValueChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"disabled\",\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"J+OKD0BhUMX1ikBT/tkq8V1kzyY=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["React","useState","useInput","SimpleInput","props","value","enteredNameValue","hasError","nameHasError","valueChangeHandler","nameValueChangeHandler","inputBlurHandler","nameInputBlurHandler","trim","emailValue","emailHasValue","emailValueChangeHandler","emailInputBlurHandler","match","enteredName","setEnteredName","enteredNameTouched","setEnteredNameTouched","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredNameIsValid","nameInputIsInvalid","enteredEmailIsValid","emailInputIsInvalid","formIsValid","formSubmissionHandler","event","preventDefault","console","log","nameInputClasses","emailInputClasses"],"sources":["/Users/kevinbenelli/Desktop/Section-16-Forms/src/components/SimpleInput.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n/*\nAuthor: Kevin Benelli\nuseState vs. useRef\nuseState: \n1. If you need immediate validation (per keystroke)\n2. Reset entered input after submission / click\n\n\nuseRef:\n1. Just need last input value\n*/\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredNameValue,\n    hasError: nameHasError,\n    valueChangeHandler: nameValueChangeHandler,\n    inputBlurHandler: nameInputBlurHandler,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: emailValue,\n    hasError: emailHasValue,\n    valueChangeHandler: emailValueChangeHandler,\n    inputBlurHandler: emailInputBlurHandler,\n  } = useInput((value) =>\n    value.trim().match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/)\n  );\n\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  const enteredNameIsValid = enteredName.trim() !== \"\"; // This is run every re-render on each keystroke | First figure out if input is valid\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched; // inferred value | then check if input has been touched\n\n  const enteredEmailIsValid = enteredEmail\n    .trim()\n    .match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/); // regex credits: https://www.w3resource.com/javascript/form/email-validation.php\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    // evaluated each render instead of having to use a useEffect\n    formIsValid = true;\n  }\n\n  // const nameInputChangeHandler = (event) => {\n  //   setEnteredName(event.target.value); // updates and then schedules so we need to use event.target.value in the if block\n  // };\n\n  // const nameInputBlurHandler = (event) => {\n  //   setEnteredNameTouched(true); // if input looses focused it has been touched\n  // };\n\n  // const emailInputChangeHandler = (event) => {\n  //   setEnteredEmail(event.target.value);\n  // };\n\n  // const emailInputBlurHandler = (event) => {\n  //   setEnteredEmailTouched(true);\n  // };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault(); // prevent http request being sent, if http request was sent it would reload the page and restart the react application. We would also loose state.\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(\"form submission handler\", enteredName);\n    setEnteredName(\"\");\n    setEnteredNameTouched(false);\n\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameValueChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty</p>\n        )}\n      </div>\n\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Your Email</label>\n        <input\n          type=\"text\"\n          id=\"email\"\n          onChange={emailValueChangeHandler}\n          onBlur={emailInputBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputIsInvalid && (\n          <p className=\"error-text\">Email must not be empty</p>\n        )}\n      </div>\n\n      <div className=\"form-actions\">\n        <button className=\"disabled\" disabled={!formIsValid}>\n          Submit\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}