{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\n\nconst useInput = validateValue => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validateValue(enteredValue); // This is run every re-render on each keystroke | First figure out if input is valid\n\n  const hasError = !valueIsValid && isTouched; // inferred value | then check if input has been touched\n\n  return {\n    value: enteredValue,\n    hasError: hasError\n  };\n};\n\n_s(useInput, \"qlnmfbTzj9Q0H+uTzI/AGYgwaf8=\");\n\nexport default useInput;","map":{"version":3,"names":["React","useState","useInput","validateValue","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","hasError","value"],"sources":["/Users/kevinbenelli/Desktop/Section-16-Forms/src/hooks/use-input.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst useInput = (validateValue) => {\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue(enteredValue); // This is run every re-render on each keystroke | First figure out if input is valid\n  const hasError = !valueIsValid && isTouched; // inferred value | then check if input has been touched\n\n  return {\n    value: enteredValue,\n    hasError: hasError,\n  };\n};\n\nexport default useInput;\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;EAAA;;EAClC,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;EACA,MAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;EAEA,MAAMO,YAAY,GAAGL,aAAa,CAACC,YAAD,CAAlC,CAJkC,CAIgB;;EAClD,MAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,SAAlC,CALkC,CAKW;;EAE7C,OAAO;IACLI,KAAK,EAAEN,YADF;IAELK,QAAQ,EAAEA;EAFL,CAAP;AAID,CAXD;;GAAMP,Q;;AAaN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}