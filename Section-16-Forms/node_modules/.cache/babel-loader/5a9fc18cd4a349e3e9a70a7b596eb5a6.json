{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useReducer } from \"react\";\n\nconst inputStateReducer = (state, action) => {};\n\nconst useInput = validateValue => {\n  _s();\n\n  const [value, dispatch] = useReducer(inputStateReducer, {\n    enteredValue: \"\",\n    isTouched: false\n  }); //   const [enteredValue, setEnteredValue] = useState(\"\");\n  //   const [isTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue(enteredValue); // This is run every re-render on each keystroke | First figure out if input is valid\n\n  const hasError = !valueIsValid && isTouched; // inferred value | then check if input has been touched\n\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value); // updates and then schedules so we need to use event.target.value in the if block\n  };\n\n  const inputBlurHandler = event => {\n    setIsTouched(true); // if input looses focused it has been touched\n  };\n\n  const reset = () => {\n    setEnteredValue(\"\");\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    hasError: hasError,\n    isValid: valueIsValid,\n    reset: reset,\n    valueChangeHandler: valueChangeHandler,\n    inputBlurHandler: inputBlurHandler\n  };\n};\n\n_s(useInput, \"cb482OGRwl2tZimAtl12IPuAwA4=\");\n\nexport default useInput;","map":{"version":3,"names":["useState","useReducer","inputStateReducer","state","action","useInput","validateValue","value","dispatch","enteredValue","isTouched","valueIsValid","hasError","valueChangeHandler","event","setEnteredValue","target","inputBlurHandler","setIsTouched","reset","isValid"],"sources":["/Users/kevinbenelli/Desktop/Section-16-Forms/src/hooks/use-input.js"],"sourcesContent":["import { useState, useReducer } from \"react\";\n\nconst inputStateReducer = (state, action) => {};\n\nconst useInput = (validateValue) => {\n  const [value, dispatch] = useReducer(inputStateReducer, {\n    enteredValue: \"\",\n    isTouched: false,\n  });\n  //   const [enteredValue, setEnteredValue] = useState(\"\");\n  //   const [isTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue(enteredValue); // This is run every re-render on each keystroke | First figure out if input is valid\n  const hasError = !valueIsValid && isTouched; // inferred value | then check if input has been touched\n\n  const valueChangeHandler = (event) => {\n    setEnteredValue(event.target.value); // updates and then schedules so we need to use event.target.value in the if block\n  };\n\n  const inputBlurHandler = (event) => {\n    setIsTouched(true); // if input looses focused it has been touched\n  };\n\n  const reset = () => {\n    setEnteredValue(\"\");\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    hasError: hasError,\n    isValid: valueIsValid,\n    reset: reset,\n    valueChangeHandler: valueChangeHandler,\n    inputBlurHandler: inputBlurHandler,\n  };\n};\n\nexport default useInput;\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB,CAAE,CAA/C;;AAEA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;EAAA;;EAClC,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,UAAU,CAACC,iBAAD,EAAoB;IACtDO,YAAY,EAAE,EADwC;IAEtDC,SAAS,EAAE;EAF2C,CAApB,CAApC,CADkC,CAKlC;EACA;;EAEA,MAAMC,YAAY,GAAGL,aAAa,CAACG,YAAD,CAAlC,CARkC,CAQgB;;EAClD,MAAMG,QAAQ,GAAG,CAACD,YAAD,IAAiBD,SAAlC,CATkC,CASW;;EAE7C,MAAMG,kBAAkB,GAAIC,KAAD,IAAW;IACpCC,eAAe,CAACD,KAAK,CAACE,MAAN,CAAaT,KAAd,CAAf,CADoC,CACC;EACtC,CAFD;;EAIA,MAAMU,gBAAgB,GAAIH,KAAD,IAAW;IAClCI,YAAY,CAAC,IAAD,CAAZ,CADkC,CACd;EACrB,CAFD;;EAIA,MAAMC,KAAK,GAAG,MAAM;IAClBJ,eAAe,CAAC,EAAD,CAAf;IACAG,YAAY,CAAC,KAAD,CAAZ;EACD,CAHD;;EAKA,OAAO;IACLX,KAAK,EAAEE,YADF;IAELG,QAAQ,EAAEA,QAFL;IAGLQ,OAAO,EAAET,YAHJ;IAILQ,KAAK,EAAEA,KAJF;IAKLN,kBAAkB,EAAEA,kBALf;IAMLI,gBAAgB,EAAEA;EANb,CAAP;AAQD,CAhCD;;GAAMZ,Q;;AAkCN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}