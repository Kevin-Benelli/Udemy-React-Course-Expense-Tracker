{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nconst initInputState = {\n  value: \"\",\n  isTouched: false\n};\n\nconst inputStateReducer = (state, action) => {\n  if (action.type === \"INPUT\") {\n    return {\n      value: action.value,\n      isTouched: state.isTouched\n    };\n  }\n\n  if (action.type === \"BLUR\") {\n    return {\n      isTouched: true,\n      value: state.value\n    };\n  }\n\n  if (action.type === \"RESET\") {\n    return {\n      isTouched: false,\n      value: \"\"\n    };\n  }\n\n  return inputStateReducer;\n};\n\nconst useInput = validateValue => {\n  _s();\n\n  const [inputState, dispatch] = useReducer(inputStateReducer, initInputState); //   const [enteredValue, setEnteredValue] = useState(\"\");\n  //   const [isTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue(inputState.value); // This is run every re-render on each keystroke | First figure out if input is valid\n\n  const hasError = !valueIsValid && inputState.isTouched; // inferred value | then check if input has been touched\n\n  const valueChangeHandler = event => {\n    dispatch({\n      type: \"INPUT\",\n      value: event.target.value\n    }); // setEnteredValue(event.target.value); // updates and then schedules so we need to use event.target.value in the if block\n  };\n\n  const inputBlurHandler = event => {\n    dispatch({\n      type: \"BLUR\"\n    }); // setIsTouched(true); // if input looses focused it has been touched\n  };\n\n  const reset = () => {\n    dispatch({\n      type: \"RESET\"\n    }); // setEnteredValue(\"\");\n    // setIsTouched(false);\n  };\n\n  return {\n    value: inputState.value,\n    hasError: hasError,\n    isValid: valueIsValid,\n    reset: reset,\n    valueChangeHandler: valueChangeHandler,\n    inputBlurHandler: inputBlurHandler\n  };\n};\n\n_s(useInput, \"XJjrSfL5J4oi3rTWagI8BVLcWts=\");\n\nexport default useInput;","map":{"version":3,"names":["useReducer","initInputState","value","isTouched","inputStateReducer","state","action","type","useInput","validateValue","inputState","dispatch","valueIsValid","hasError","valueChangeHandler","event","target","inputBlurHandler","reset","isValid"],"sources":["/Users/kevinbenelli/Desktop/Section-16-Forms/src/hooks/use-input.js"],"sourcesContent":["import { useReducer } from \"react\";\n\nconst initInputState = {\n  value: \"\",\n  isTouched: false,\n};\nconst inputStateReducer = (state, action) => {\n  if (action.type === \"INPUT\") {\n    return { value: action.value, isTouched: state.isTouched };\n  }\n  if (action.type === \"BLUR\") {\n    return { isTouched: true, value: state.value };\n  }\n  if (action.type === \"RESET\") {\n    return { isTouched: false, value: \"\" };\n  }\n  return inputStateReducer;\n};\nconst useInput = (validateValue) => {\n  const [inputState, dispatch] = useReducer(inputStateReducer, initInputState);\n  //   const [enteredValue, setEnteredValue] = useState(\"\");\n  //   const [isTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue(inputState.value); // This is run every re-render on each keystroke | First figure out if input is valid\n  const hasError = !valueIsValid && inputState.isTouched; // inferred value | then check if input has been touched\n\n  const valueChangeHandler = (event) => {\n    dispatch({ type: \"INPUT\", value: event.target.value });\n    // setEnteredValue(event.target.value); // updates and then schedules so we need to use event.target.value in the if block\n  };\n\n  const inputBlurHandler = (event) => {\n    dispatch({ type: \"BLUR\" });\n    // setIsTouched(true); // if input looses focused it has been touched\n  };\n\n  const reset = () => {\n    dispatch({ type: \"RESET\" });\n    // setEnteredValue(\"\");\n    // setIsTouched(false);\n  };\n\n  return {\n    value: inputState.value,\n    hasError: hasError,\n    isValid: valueIsValid,\n    reset: reset,\n    valueChangeHandler: valueChangeHandler,\n    inputBlurHandler: inputBlurHandler,\n  };\n};\n\nexport default useInput;\n"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,MAAMC,cAAc,GAAG;EACrBC,KAAK,EAAE,EADc;EAErBC,SAAS,EAAE;AAFU,CAAvB;;AAIA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EAC3C,IAAIA,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;IAC3B,OAAO;MAAEL,KAAK,EAAEI,MAAM,CAACJ,KAAhB;MAAuBC,SAAS,EAAEE,KAAK,CAACF;IAAxC,CAAP;EACD;;EACD,IAAIG,MAAM,CAACC,IAAP,KAAgB,MAApB,EAA4B;IAC1B,OAAO;MAAEJ,SAAS,EAAE,IAAb;MAAmBD,KAAK,EAAEG,KAAK,CAACH;IAAhC,CAAP;EACD;;EACD,IAAII,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;IAC3B,OAAO;MAAEJ,SAAS,EAAE,KAAb;MAAoBD,KAAK,EAAE;IAA3B,CAAP;EACD;;EACD,OAAOE,iBAAP;AACD,CAXD;;AAYA,MAAMI,QAAQ,GAAIC,aAAD,IAAmB;EAAA;;EAClC,MAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBX,UAAU,CAACI,iBAAD,EAAoBH,cAApB,CAAzC,CADkC,CAElC;EACA;;EAEA,MAAMW,YAAY,GAAGH,aAAa,CAACC,UAAU,CAACR,KAAZ,CAAlC,CALkC,CAKoB;;EACtD,MAAMW,QAAQ,GAAG,CAACD,YAAD,IAAiBF,UAAU,CAACP,SAA7C,CANkC,CAMsB;;EAExD,MAAMW,kBAAkB,GAAIC,KAAD,IAAW;IACpCJ,QAAQ,CAAC;MAAEJ,IAAI,EAAE,OAAR;MAAiBL,KAAK,EAAEa,KAAK,CAACC,MAAN,CAAad;IAArC,CAAD,CAAR,CADoC,CAEpC;EACD,CAHD;;EAKA,MAAMe,gBAAgB,GAAIF,KAAD,IAAW;IAClCJ,QAAQ,CAAC;MAAEJ,IAAI,EAAE;IAAR,CAAD,CAAR,CADkC,CAElC;EACD,CAHD;;EAKA,MAAMW,KAAK,GAAG,MAAM;IAClBP,QAAQ,CAAC;MAAEJ,IAAI,EAAE;IAAR,CAAD,CAAR,CADkB,CAElB;IACA;EACD,CAJD;;EAMA,OAAO;IACLL,KAAK,EAAEQ,UAAU,CAACR,KADb;IAELW,QAAQ,EAAEA,QAFL;IAGLM,OAAO,EAAEP,YAHJ;IAILM,KAAK,EAAEA,KAJF;IAKLJ,kBAAkB,EAAEA,kBALf;IAMLG,gBAAgB,EAAEA;EANb,CAAP;AAQD,CAhCD;;GAAMT,Q;;AAkCN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}