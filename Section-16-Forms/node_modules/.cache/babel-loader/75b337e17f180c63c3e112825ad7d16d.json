{"ast":null,"code":"var _jsxFileName = \"/Users/kevinbenelli/Desktop/Section-16-Forms/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n/*\nAuthor: Kevin Benelli\nuseState vs. useRef\nuseState: \n1. If you need immediate validation (per keystroke)\n2. Reset entered input after submission / click\n\n\nuseRef:\n1. Just need last input value\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    hasError: nameHasError,\n    isValid: nameIsValid,\n    reset: resetName,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler\n  } = useInput(value => value.trim() !== \"\");\n  const {\n    value: enteredEmail,\n    hasError: emailHasError,\n    isValid: emailIsValid,\n    reset: resetEmail,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler\n  } = useInput(value => value.trim().match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/)); // const enteredNameIsValid = enteredName.trim() !== \"\"; // This is run every re-render on each keystroke | First figure out if input is valid\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched; // inferred value | then check if input has been touched\n  // const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    // evaluated each render instead of having to use a useEffect\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); // prevent http request being sent, if http request was sent it would reload the page and restart the react application. We would also loose state.\n\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n\n    resetName();\n    resetEmail();\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), nameHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"email\",\n        onChange: emailChangeHandler,\n        onBlur: emailBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), emailHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"disabled\",\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"inCtuSashq61/rJFbHrdyQ30zSk=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["React","useState","useInput","SimpleInput","props","value","enteredName","hasError","nameHasError","isValid","nameIsValid","reset","resetName","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","trim","enteredEmail","emailHasError","emailIsValid","resetEmail","emailChangeHandler","emailBlurHandler","match","formIsValid","enteredNameIsValid","enteredEmailIsValid","formSubmissionHandler","event","preventDefault","nameInputClasses","nameInputIsInvalid","emailInputClasses","emailInputIsInvalid"],"sources":["/Users/kevinbenelli/Desktop/Section-16-Forms/src/components/SimpleInput.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n/*\nAuthor: Kevin Benelli\nuseState vs. useRef\nuseState: \n1. If you need immediate validation (per keystroke)\n2. Reset entered input after submission / click\n\n\nuseRef:\n1. Just need last input value\n*/\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    hasError: nameHasError,\n    isValid: nameIsValid,\n    reset: resetName,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredEmail,\n    hasError: emailHasError,\n    isValid: emailIsValid,\n    reset: resetEmail,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n  } = useInput((value) =>\n    value.trim().match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/)\n  );\n\n  // const enteredNameIsValid = enteredName.trim() !== \"\"; // This is run every re-render on each keystroke | First figure out if input is valid\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched; // inferred value | then check if input has been touched\n\n  // const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    // evaluated each render instead of having to use a useEffect\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault(); // prevent http request being sent, if http request was sent it would reload the page and restart the react application. We would also loose state.\n\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n\n    resetName();\n    resetEmail();\n  };\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n        {nameHasError && <p className=\"error-text\">Name must not be empty</p>}\n      </div>\n\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Your Email</label>\n        <input\n          type=\"text\"\n          id=\"email\"\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n          value={enteredEmail}\n        />\n        {emailHasError && <p className=\"error-text\">Email must not be empty</p>}\n      </div>\n\n      <div className=\"form-actions\">\n        <button className=\"disabled\" disabled={!formIsValid}>\n          Submit\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAM;IACJC,KAAK,EAAEC,WADH;IAEJC,QAAQ,EAAEC,YAFN;IAGJC,OAAO,EAAEC,WAHL;IAIJC,KAAK,EAAEC,SAJH;IAKJC,kBAAkB,EAAEC,iBALhB;IAMJC,gBAAgB,EAAEC;EANd,IAOFd,QAAQ,CAAEG,KAAD,IAAWA,KAAK,CAACY,IAAN,OAAiB,EAA7B,CAPZ;EASA,MAAM;IACJZ,KAAK,EAAEa,YADH;IAEJX,QAAQ,EAAEY,aAFN;IAGJV,OAAO,EAAEW,YAHL;IAIJT,KAAK,EAAEU,UAJH;IAKJR,kBAAkB,EAAES,kBALhB;IAMJP,gBAAgB,EAAEQ;EANd,IAOFrB,QAAQ,CAAEG,KAAD,IACXA,KAAK,CAACY,IAAN,GAAaO,KAAb,CAAmB,+CAAnB,CADU,CAPZ,CAV6B,CAqB7B;EACA;EAEA;;EAEA,IAAIC,WAAW,GAAG,KAAlB;;EAEA,IAAIC,kBAAkB,IAAIC,mBAA1B,EAA+C;IAC7C;IACAF,WAAW,GAAG,IAAd;EACD;;EAED,MAAMG,qBAAqB,GAAIC,KAAD,IAAW;IACvCA,KAAK,CAACC,cAAN,GADuC,CACf;;IAExB,IAAI,CAACJ,kBAAD,IAAuB,CAACC,mBAA5B,EAAiD;MAC/C;IACD;;IAEDf,SAAS;IACTS,UAAU;EACX,CATD;;EAWA,MAAMU,gBAAgB,GAAGC,kBAAkB,GACvC,sBADuC,GAEvC,cAFJ;EAIA,MAAMC,iBAAiB,GAAGC,mBAAmB,GACzC,sBADyC,GAEzC,cAFJ;EAIA,oBACE;IAAM,QAAQ,EAAEN,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAEG,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,IAAI,EAAC,MADP;QAEE,EAAE,EAAC,MAFL;QAGE,QAAQ,EAAEjB,iBAHZ;QAIE,MAAM,EAAEE,eAJV;QAKE,KAAK,EAAEV;MALT;QAAA;QAAA;QAAA;MAAA,QAFF,EASGE,YAAY,iBAAI;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QATnB;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAaE;MAAK,SAAS,EAAEyB,iBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,OAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,IAAI,EAAC,MADP;QAEE,EAAE,EAAC,OAFL;QAGE,QAAQ,EAAEX,kBAHZ;QAIE,MAAM,EAAEC,gBAJV;QAKE,KAAK,EAAEL;MALT;QAAA;QAAA;QAAA;MAAA,QAFF,EASGC,aAAa,iBAAI;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QATpB;IAAA;MAAA;MAAA;MAAA;IAAA,QAbF,eAyBE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAQ,SAAS,EAAC,UAAlB;QAA6B,QAAQ,EAAE,CAACM,WAAxC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAzBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAiCD,CArFD;;GAAMtB,W;UAQAD,Q,EASAA,Q;;;KAjBAC,W;AAuFN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}