{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useReducer } from \"react\";\nconst initInputState = {\n  enteredValue: \"\",\n  isTouched: false\n};\n\nconst inputStateReducer = (state, action) => {\n  if (action.value === \"INPUT\") {\n    return {\n      value: action.value,\n      isTouched: state.isTouched\n    };\n  } else if (action.value === \"BLUR\") {\n    return {\n      isTouched: true,\n      value: state.value\n    };\n  } else if (action.value === \"RESET\") {\n    return initInputState;\n  }\n\n  return initInputState;\n};\n\nconst useInput = validateValue => {\n  _s();\n\n  const [inputState, dispatch] = useReducer(inputStateReducer, initInputState); //   const [enteredValue, setEnteredValue] = useState(\"\");\n  //   const [isTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue(inputState.value); // This is run every re-render on each keystroke | First figure out if input is valid\n\n  const hasError = !valueIsValid && inputState.isTouched; // inferred value | then check if input has been touched\n\n  const valueChangeHandler = event => {\n    dispatch({\n      type: \"INPUT\",\n      value: event.target.value\n    }); // setEnteredValue(event.target.value); // updates and then schedules so we need to use event.target.value in the if block\n  };\n\n  const inputBlurHandler = event => {\n    dispatch({\n      type: \"BLUR\"\n    }); // setIsTouched(true); // if input looses focused it has been touched\n  };\n\n  const reset = () => {\n    dispatch({\n      type: \"RESET\"\n    }); // setEnteredValue(\"\");\n    // setIsTouched(false);\n  };\n\n  return {\n    value: inputState,\n    hasError: hasError,\n    isValid: valueIsValid,\n    reset: reset,\n    valueChangeHandler: valueChangeHandler,\n    inputBlurHandler: inputBlurHandler\n  };\n};\n\n_s(useInput, \"XJjrSfL5J4oi3rTWagI8BVLcWts=\");\n\nexport default useInput;","map":{"version":3,"names":["useState","useReducer","initInputState","enteredValue","isTouched","inputStateReducer","state","action","value","useInput","validateValue","inputState","dispatch","valueIsValid","hasError","valueChangeHandler","event","type","target","inputBlurHandler","reset","isValid"],"sources":["/Users/kevinbenelli/Desktop/Section-16-Forms/src/hooks/use-input.js"],"sourcesContent":["import { useState, useReducer } from \"react\";\n\nconst initInputState = {\n  enteredValue: \"\",\n  isTouched: false,\n};\nconst inputStateReducer = (state, action) => {\n  if (action.value === \"INPUT\") {\n    return { value: action.value, isTouched: state.isTouched };\n  } else if (action.value === \"BLUR\") {\n    return { isTouched: true, value: state.value };\n  } else if (action.value === \"RESET\") {\n    return initInputState;\n  }\n  return initInputState;\n};\n\nconst useInput = (validateValue) => {\n  const [inputState, dispatch] = useReducer(inputStateReducer, initInputState);\n  //   const [enteredValue, setEnteredValue] = useState(\"\");\n  //   const [isTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue(inputState.value); // This is run every re-render on each keystroke | First figure out if input is valid\n  const hasError = !valueIsValid && inputState.isTouched; // inferred value | then check if input has been touched\n\n  const valueChangeHandler = (event) => {\n    dispatch({ type: \"INPUT\", value: event.target.value });\n    // setEnteredValue(event.target.value); // updates and then schedules so we need to use event.target.value in the if block\n  };\n\n  const inputBlurHandler = (event) => {\n    dispatch({ type: \"BLUR\" });\n    // setIsTouched(true); // if input looses focused it has been touched\n  };\n\n  const reset = () => {\n    dispatch({ type: \"RESET\" });\n    // setEnteredValue(\"\");\n    // setIsTouched(false);\n  };\n\n  return {\n    value: inputState,\n    hasError: hasError,\n    isValid: valueIsValid,\n    reset: reset,\n    valueChangeHandler: valueChangeHandler,\n    inputBlurHandler: inputBlurHandler,\n  };\n};\n\nexport default useInput;\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AAEA,MAAMC,cAAc,GAAG;EACrBC,YAAY,EAAE,EADO;EAErBC,SAAS,EAAE;AAFU,CAAvB;;AAIA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EAC3C,IAAIA,MAAM,CAACC,KAAP,KAAiB,OAArB,EAA8B;IAC5B,OAAO;MAAEA,KAAK,EAAED,MAAM,CAACC,KAAhB;MAAuBJ,SAAS,EAAEE,KAAK,CAACF;IAAxC,CAAP;EACD,CAFD,MAEO,IAAIG,MAAM,CAACC,KAAP,KAAiB,MAArB,EAA6B;IAClC,OAAO;MAAEJ,SAAS,EAAE,IAAb;MAAmBI,KAAK,EAAEF,KAAK,CAACE;IAAhC,CAAP;EACD,CAFM,MAEA,IAAID,MAAM,CAACC,KAAP,KAAiB,OAArB,EAA8B;IACnC,OAAON,cAAP;EACD;;EACD,OAAOA,cAAP;AACD,CATD;;AAWA,MAAMO,QAAQ,GAAIC,aAAD,IAAmB;EAAA;;EAClC,MAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBX,UAAU,CAACI,iBAAD,EAAoBH,cAApB,CAAzC,CADkC,CAElC;EACA;;EAEA,MAAMW,YAAY,GAAGH,aAAa,CAACC,UAAU,CAACH,KAAZ,CAAlC,CALkC,CAKoB;;EACtD,MAAMM,QAAQ,GAAG,CAACD,YAAD,IAAiBF,UAAU,CAACP,SAA7C,CANkC,CAMsB;;EAExD,MAAMW,kBAAkB,GAAIC,KAAD,IAAW;IACpCJ,QAAQ,CAAC;MAAEK,IAAI,EAAE,OAAR;MAAiBT,KAAK,EAAEQ,KAAK,CAACE,MAAN,CAAaV;IAArC,CAAD,CAAR,CADoC,CAEpC;EACD,CAHD;;EAKA,MAAMW,gBAAgB,GAAIH,KAAD,IAAW;IAClCJ,QAAQ,CAAC;MAAEK,IAAI,EAAE;IAAR,CAAD,CAAR,CADkC,CAElC;EACD,CAHD;;EAKA,MAAMG,KAAK,GAAG,MAAM;IAClBR,QAAQ,CAAC;MAAEK,IAAI,EAAE;IAAR,CAAD,CAAR,CADkB,CAElB;IACA;EACD,CAJD;;EAMA,OAAO;IACLT,KAAK,EAAEG,UADF;IAELG,QAAQ,EAAEA,QAFL;IAGLO,OAAO,EAAER,YAHJ;IAILO,KAAK,EAAEA,KAJF;IAKLL,kBAAkB,EAAEA,kBALf;IAMLI,gBAAgB,EAAEA;EANb,CAAP;AAQD,CAhCD;;GAAMV,Q;;AAkCN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}