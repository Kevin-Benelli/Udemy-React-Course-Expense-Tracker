{"ast":null,"code":"var _jsxFileName = \"/Users/kevinbenelli/Desktop/Section-16-Forms/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n/*\nAuthor: Kevin Benelli\nuseState vs. useRef\nuseState: \n1. If you need immediate validation (per keystroke)\n2. Reset entered input after submission / click\n\n\nuseRef:\n1. Just need last input value\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    hasError: nameInputHasError,\n    isValid: nameIsValid,\n    reset: resetNameInput,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler\n  } = useInput(value => value.trim() !== \"\");\n  const {\n    value: enteredEmail,\n    hasError: emailInputHasError,\n    isValid: emailIsValid,\n    reset: resetEmailInput,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler\n  } = useInput(value => value.trim().match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/)); // const enteredNameIsValid = enteredName.trim() !== \"\"; // This is run every re-render on each keystroke | First figure out if input is valid\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched; // inferred value | then check if input has been touched\n  // const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (nameIsValid && emailIsValid) {\n    // evaluated each render instead of having to use a useEffect\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); // prevent http request being sent, if http request was sent it would reload the page and restart the react application. We would also loose state.\n\n    if (!nameIsValid || !emailIsValid) {\n      return;\n    }\n\n    resetNameInput();\n    resetEmailInput();\n  };\n\n  const nameInputClasses = nameIsValid ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailIsValid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"email\",\n        onChange: emailChangeHandler,\n        onBlur: emailBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), emailInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"disabled\",\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"MRFlaPqXsYGg1O4VFguVkpijUcA=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["React","useState","useInput","SimpleInput","props","value","enteredName","hasError","nameInputHasError","isValid","nameIsValid","reset","resetNameInput","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","trim","enteredEmail","emailInputHasError","emailIsValid","resetEmailInput","emailChangeHandler","emailBlurHandler","match","formIsValid","formSubmissionHandler","event","preventDefault","nameInputClasses","emailInputClasses"],"sources":["/Users/kevinbenelli/Desktop/Section-16-Forms/src/components/SimpleInput.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n/*\nAuthor: Kevin Benelli\nuseState vs. useRef\nuseState: \n1. If you need immediate validation (per keystroke)\n2. Reset entered input after submission / click\n\n\nuseRef:\n1. Just need last input value\n*/\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    hasError: nameInputHasError,\n    isValid: nameIsValid,\n    reset: resetNameInput,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredEmail,\n    hasError: emailInputHasError,\n    isValid: emailIsValid,\n    reset: resetEmailInput,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n  } = useInput((value) =>\n    value.trim().match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/)\n  );\n\n  // const enteredNameIsValid = enteredName.trim() !== \"\"; // This is run every re-render on each keystroke | First figure out if input is valid\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched; // inferred value | then check if input has been touched\n\n  // const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (nameIsValid && emailIsValid) {\n    // evaluated each render instead of having to use a useEffect\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault(); // prevent http request being sent, if http request was sent it would reload the page and restart the react application. We would also loose state.\n\n    if (!nameIsValid || !emailIsValid) {\n      return;\n    }\n\n    resetNameInput();\n    resetEmailInput();\n  };\n\n  const nameInputClasses = nameIsValid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailIsValid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n        {nameInputHasError && (\n          <p className=\"error-text\">Name must not be empty</p>\n        )}\n      </div>\n\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Your Email</label>\n        <input\n          type=\"text\"\n          id=\"email\"\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputHasError && (\n          <p className=\"error-text\">Email must not be empty</p>\n        )}\n      </div>\n\n      <div className=\"form-actions\">\n        <button className=\"disabled\" disabled={!formIsValid}>\n          Submit\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAM;IACJC,KAAK,EAAEC,WADH;IAEJC,QAAQ,EAAEC,iBAFN;IAGJC,OAAO,EAAEC,WAHL;IAIJC,KAAK,EAAEC,cAJH;IAKJC,kBAAkB,EAAEC,iBALhB;IAMJC,gBAAgB,EAAEC;EANd,IAOFd,QAAQ,CAAEG,KAAD,IAAWA,KAAK,CAACY,IAAN,OAAiB,EAA7B,CAPZ;EASA,MAAM;IACJZ,KAAK,EAAEa,YADH;IAEJX,QAAQ,EAAEY,kBAFN;IAGJV,OAAO,EAAEW,YAHL;IAIJT,KAAK,EAAEU,eAJH;IAKJR,kBAAkB,EAAES,kBALhB;IAMJP,gBAAgB,EAAEQ;EANd,IAOFrB,QAAQ,CAAEG,KAAD,IACXA,KAAK,CAACY,IAAN,GAAaO,KAAb,CAAmB,+CAAnB,CADU,CAPZ,CAV6B,CAqB7B;EACA;EAEA;;EAEA,IAAIC,WAAW,GAAG,KAAlB;;EAEA,IAAIf,WAAW,IAAIU,YAAnB,EAAiC;IAC/B;IACAK,WAAW,GAAG,IAAd;EACD;;EAED,MAAMC,qBAAqB,GAAIC,KAAD,IAAW;IACvCA,KAAK,CAACC,cAAN,GADuC,CACf;;IAExB,IAAI,CAAClB,WAAD,IAAgB,CAACU,YAArB,EAAmC;MACjC;IACD;;IAEDR,cAAc;IACdS,eAAe;EAChB,CATD;;EAWA,MAAMQ,gBAAgB,GAAGnB,WAAW,GAChC,sBADgC,GAEhC,cAFJ;EAIA,MAAMoB,iBAAiB,GAAGV,YAAY,GAClC,sBADkC,GAElC,cAFJ;EAIA,oBACE;IAAM,QAAQ,EAAEM,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAEG,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,IAAI,EAAC,MADP;QAEE,EAAE,EAAC,MAFL;QAGE,QAAQ,EAAEf,iBAHZ;QAIE,MAAM,EAAEE,eAJV;QAKE,KAAK,EAAEV;MALT;QAAA;QAAA;QAAA;MAAA,QAFF,EASGE,iBAAiB,iBAChB;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAVJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAeE;MAAK,SAAS,EAAEsB,iBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,OAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,IAAI,EAAC,MADP;QAEE,EAAE,EAAC,OAFL;QAGE,QAAQ,EAAER,kBAHZ;QAIE,MAAM,EAAEC,gBAJV;QAKE,KAAK,EAAEL;MALT;QAAA;QAAA;QAAA;MAAA,QAFF,EASGC,kBAAkB,iBACjB;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAVJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAfF,eA6BE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAQ,SAAS,EAAC,UAAlB;QAA6B,QAAQ,EAAE,CAACM,WAAxC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QA7BF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAqCD,CAzFD;;GAAMtB,W;UAQAD,Q,EASAA,Q;;;KAjBAC,W;AA2FN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}