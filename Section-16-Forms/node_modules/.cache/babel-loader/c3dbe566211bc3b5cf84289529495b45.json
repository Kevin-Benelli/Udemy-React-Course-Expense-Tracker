{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useReducer } from \"react\";\nconst initInputState = {\n  enteredValue: \"\",\n  isTouched: false\n};\n\nconst inputStateReducer = (state, action) => {\n  // if(action.value\n  return initInputState;\n};\n\nconst useInput = validateValue => {\n  _s();\n\n  const [inputState, dispatch] = useReducer(inputStateReducer, initInputState); //   const [enteredValue, setEnteredValue] = useState(\"\");\n  //   const [isTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue(inputState.value); // This is run every re-render on each keystroke | First figure out if input is valid\n\n  const hasError = !valueIsValid && inputState.isTouched; // inferred value | then check if input has been touched\n\n  const valueChangeHandler = event => {\n    dispatch({\n      type: \"INPUT\"\n    }, event.target.value);\n    setEnteredValue(event.target.value); // updates and then schedules so we need to use event.target.value in the if block\n  };\n\n  const inputBlurHandler = event => {\n    dispatch({\n      type: \"BLUR\"\n    }, true); // setIsTouched(true); // if input looses focused it has been touched\n  };\n\n  const reset = () => {\n    setEnteredValue(\"\");\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    hasError: hasError,\n    isValid: valueIsValid,\n    reset: reset,\n    valueChangeHandler: valueChangeHandler,\n    inputBlurHandler: inputBlurHandler\n  };\n};\n\n_s(useInput, \"XJjrSfL5J4oi3rTWagI8BVLcWts=\");\n\nexport default useInput;","map":{"version":3,"names":["useState","useReducer","initInputState","enteredValue","isTouched","inputStateReducer","state","action","useInput","validateValue","inputState","dispatch","valueIsValid","value","hasError","valueChangeHandler","event","type","target","setEnteredValue","inputBlurHandler","reset","setIsTouched","isValid"],"sources":["/Users/kevinbenelli/Desktop/Section-16-Forms/src/hooks/use-input.js"],"sourcesContent":["import { useState, useReducer } from \"react\";\n\nconst initInputState = {\n  enteredValue: \"\",\n  isTouched: false,\n};\nconst inputStateReducer = (state, action) => {\n  // if(action.value\n  return initInputState;\n};\n\nconst useInput = (validateValue) => {\n  const [inputState, dispatch] = useReducer(inputStateReducer, initInputState);\n  //   const [enteredValue, setEnteredValue] = useState(\"\");\n  //   const [isTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue(inputState.value); // This is run every re-render on each keystroke | First figure out if input is valid\n  const hasError = !valueIsValid && inputState.isTouched; // inferred value | then check if input has been touched\n\n  const valueChangeHandler = (event) => {\n    dispatch({ type: \"INPUT\" }, event.target.value);\n    setEnteredValue(event.target.value); // updates and then schedules so we need to use event.target.value in the if block\n  };\n\n  const inputBlurHandler = (event) => {\n    dispatch({ type: \"BLUR\" }, true);\n    // setIsTouched(true); // if input looses focused it has been touched\n  };\n\n  const reset = () => {\n    setEnteredValue(\"\");\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    hasError: hasError,\n    isValid: valueIsValid,\n    reset: reset,\n    valueChangeHandler: valueChangeHandler,\n    inputBlurHandler: inputBlurHandler,\n  };\n};\n\nexport default useInput;\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AAEA,MAAMC,cAAc,GAAG;EACrBC,YAAY,EAAE,EADO;EAErBC,SAAS,EAAE;AAFU,CAAvB;;AAIA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EAC3C;EACA,OAAOL,cAAP;AACD,CAHD;;AAKA,MAAMM,QAAQ,GAAIC,aAAD,IAAmB;EAAA;;EAClC,MAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBV,UAAU,CAACI,iBAAD,EAAoBH,cAApB,CAAzC,CADkC,CAElC;EACA;;EAEA,MAAMU,YAAY,GAAGH,aAAa,CAACC,UAAU,CAACG,KAAZ,CAAlC,CALkC,CAKoB;;EACtD,MAAMC,QAAQ,GAAG,CAACF,YAAD,IAAiBF,UAAU,CAACN,SAA7C,CANkC,CAMsB;;EAExD,MAAMW,kBAAkB,GAAIC,KAAD,IAAW;IACpCL,QAAQ,CAAC;MAAEM,IAAI,EAAE;IAAR,CAAD,EAAoBD,KAAK,CAACE,MAAN,CAAaL,KAAjC,CAAR;IACAM,eAAe,CAACH,KAAK,CAACE,MAAN,CAAaL,KAAd,CAAf,CAFoC,CAEC;EACtC,CAHD;;EAKA,MAAMO,gBAAgB,GAAIJ,KAAD,IAAW;IAClCL,QAAQ,CAAC;MAAEM,IAAI,EAAE;IAAR,CAAD,EAAmB,IAAnB,CAAR,CADkC,CAElC;EACD,CAHD;;EAKA,MAAMI,KAAK,GAAG,MAAM;IAClBF,eAAe,CAAC,EAAD,CAAf;IACAG,YAAY,CAAC,KAAD,CAAZ;EACD,CAHD;;EAKA,OAAO;IACLT,KAAK,EAAEV,YADF;IAELW,QAAQ,EAAEA,QAFL;IAGLS,OAAO,EAAEX,YAHJ;IAILS,KAAK,EAAEA,KAJF;IAKLN,kBAAkB,EAAEA,kBALf;IAMLK,gBAAgB,EAAEA;EANb,CAAP;AAQD,CA/BD;;GAAMZ,Q;;AAiCN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}