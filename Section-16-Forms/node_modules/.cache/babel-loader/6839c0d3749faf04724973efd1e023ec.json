{"ast":null,"code":"var _jsxFileName = \"/Users/kevinbenelli/Desktop/Section-16-Forms/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\n/*\nuseState vs. useRef\nuseState: \n1. If you need immediate validation (per keystroke)\n2. Reset entered input after submission / click\n\n\nuseRef:\n1. Just need last input value\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const nameInputRef = useRef(\"\");\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value); // console.log(enteredName);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); // prevent http request being sent, if http request was sent it would reload the page and restart the react application. We would also loose state.\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      setErrorMessage(\"Name must not be empty\");\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n    console.log(\"form submission handler\", enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(\"form submission handler\", enteredValue); // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n\n    setEnteredName(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), !enteredNameIsValid && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"QCGWvI5mVBUDbnvSPoPcOgC2s1Y=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["React","useState","useRef","SimpleInput","props","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","errorMessage","setErrorMessage","nameInputRef","nameInputChangeHandler","event","target","value","formSubmissionHandler","preventDefault","trim","console","log","enteredValue","current"],"sources":["/Users/kevinbenelli/Desktop/Section-16-Forms/src/components/SimpleInput.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\n\n/*\nuseState vs. useRef\nuseState: \n1. If you need immediate validation (per keystroke)\n2. Reset entered input after submission / click\n\n\nuseRef:\n1. Just need last input value\n*/\n\nconst SimpleInput = (props) => {\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const nameInputRef = useRef(\"\");\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n    // console.log(enteredName);\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault(); // prevent http request being sent, if http request was sent it would reload the page and restart the react application. We would also loose state.\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      setErrorMessage(\"Name must not be empty\");\n      return;\n    }\n    setEnteredNameIsValid(true);\n    console.log(\"form submission handler\", enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(\"form submission handler\", enteredValue);\n    // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n    setEnteredName(\"\");\n  };\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className=\"form-control\">\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          value={enteredName}\n        />\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n\n      {!enteredNameIsValid && <div>{errorMessage}</div>}\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACM,kBAAD,EAAqBC,qBAArB,IAA8CP,QAAQ,CAAC,KAAD,CAA5D;EACA,MAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;EAEA,MAAMU,YAAY,GAAGT,MAAM,CAAC,EAAD,CAA3B;;EAEA,MAAMU,sBAAsB,GAAIC,KAAD,IAAW;IACxCP,cAAc,CAACO,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd,CADwC,CAExC;EACD,CAHD;;EAKA,MAAMC,qBAAqB,GAAIH,KAAD,IAAW;IACvCA,KAAK,CAACI,cAAN,GADuC,CACf;;IAExB,IAAIZ,WAAW,CAACa,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BV,qBAAqB,CAAC,KAAD,CAArB;MACAE,eAAe,CAAC,wBAAD,CAAf;MACA;IACD;;IACDF,qBAAqB,CAAC,IAAD,CAArB;IACAW,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCf,WAAvC;IACA,MAAMgB,YAAY,GAAGV,YAAY,CAACW,OAAb,CAAqBP,KAA1C;IACAI,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCC,YAAvC,EAXuC,CAYvC;;IACAf,cAAc,CAAC,EAAD,CAAd;EACD,CAdD;;EAgBA,oBACE;IAAM,QAAQ,EAAEU,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAC,cAAf;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,GAAG,EAAEL,YADP;QAEE,IAAI,EAAC,MAFP;QAGE,EAAE,EAAC,MAHL;QAIE,QAAQ,EAAEC,sBAJZ;QAKE,KAAK,EAAEP;MALT;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAWE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAXF,EAeG,CAACE,kBAAD,iBAAuB;MAAA,UAAME;IAAN;MAAA;MAAA;MAAA;IAAA,QAf1B;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAmBD,CA/CD;;GAAMN,W;;KAAAA,W;AAiDN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}