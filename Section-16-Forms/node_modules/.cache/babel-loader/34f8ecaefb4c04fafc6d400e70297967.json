{"ast":null,"code":"var _jsxFileName = \"/Users/kevinbenelli/Desktop/Section-16-Forms/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\n/*\nuseState vs. useRef\nuseState: \n1. If you need immediate validation (per keystroke)\n2. Reset entered input after submission / click\n\n\nuseRef:\n1. Just need last input value\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value); // updates and then schedules so we need to use event.target.value in the if block\n\n    if (enteredName.trim() !== \"\") {\n      setEnteredNameIsValid(true);\n    }\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true); // if input looses focused it has been touched\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      setErrorMessage(\"Name must not be empty\");\n      return;\n    }\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); // prevent http request being sent, if http request was sent it would reload the page and restart the react application. We would also loose state.\n\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      setErrorMessage(\"Name must not be empty\");\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n    console.log(\"form submission handler\", enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(\"form submission handler\", enteredValue); // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n\n    setEnteredName(\"\");\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"Uhkp6hfFvVs2RHxTmwIxIbq/zMQ=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["React","useState","useEffect","SimpleInput","props","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","errorMessage","setErrorMessage","enteredNameTouched","setEnteredNameTouched","nameInputChangeHandler","event","target","value","trim","nameInputBlurHandler","formSubmissionHandler","preventDefault","console","log","enteredValue","nameInputRef","current","nameInputIsInvalid","nameInputClasses"],"sources":["/Users/kevinbenelli/Desktop/Section-16-Forms/src/components/SimpleInput.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n/*\nuseState vs. useRef\nuseState: \n1. If you need immediate validation (per keystroke)\n2. Reset entered input after submission / click\n\n\nuseRef:\n1. Just need last input value\n*/\n\nconst SimpleInput = (props) => {\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value); // updates and then schedules so we need to use event.target.value in the if block\n\n    if (enteredName.trim() !== \"\") {\n      setEnteredNameIsValid(true);\n    }\n  };\n\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameTouched(true); // if input looses focused it has been touched\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      setErrorMessage(\"Name must not be empty\");\n      return;\n    }\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault(); // prevent http request being sent, if http request was sent it would reload the page and restart the react application. We would also loose state.\n    setEnteredNameTouched(true);\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      setErrorMessage(\"Name must not be empty\");\n      return;\n    }\n    setEnteredNameIsValid(true);\n    console.log(\"form submission handler\", enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(\"form submission handler\", enteredValue);\n    // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n    setEnteredName(\"\");\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && <p className=\"error-text\">{errorMessage}</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACM,kBAAD,EAAqBC,qBAArB,IAA8CP,QAAQ,CAAC,KAAD,CAA5D;EACA,MAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;EACA,MAAM,CAACU,kBAAD,EAAqBC,qBAArB,IAA8CX,QAAQ,CAAC,KAAD,CAA5D;;EAEA,MAAMY,sBAAsB,GAAIC,KAAD,IAAW;IACxCR,cAAc,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd,CADwC,CACJ;;IAEpC,IAAIX,WAAW,CAACY,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BT,qBAAqB,CAAC,IAAD,CAArB;IACD;EACF,CAND;;EAQA,MAAMU,oBAAoB,GAAIJ,KAAD,IAAW;IACtCF,qBAAqB,CAAC,IAAD,CAArB,CADsC,CACT;;IAE7B,IAAIP,WAAW,CAACY,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BT,qBAAqB,CAAC,KAAD,CAArB;MACAE,eAAe,CAAC,wBAAD,CAAf;MACA;IACD;EACF,CARD;;EAUA,MAAMS,qBAAqB,GAAIL,KAAD,IAAW;IACvCA,KAAK,CAACM,cAAN,GADuC,CACf;;IACxBR,qBAAqB,CAAC,IAAD,CAArB;;IACA,IAAIP,WAAW,CAACY,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BT,qBAAqB,CAAC,KAAD,CAArB;MACAE,eAAe,CAAC,wBAAD,CAAf;MACA;IACD;;IACDF,qBAAqB,CAAC,IAAD,CAArB;IACAa,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCjB,WAAvC;IACA,MAAMkB,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqBT,KAA1C;IACAK,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCC,YAAvC,EAXuC,CAYvC;;IACAjB,cAAc,CAAC,EAAD,CAAd;EACD,CAdD;;EAgBA,MAAMoB,kBAAkB,GAAG,CAACnB,kBAAD,IAAuBI,kBAAlD;EACA,MAAMgB,gBAAgB,GAAGD,kBAAkB,GACvC,sBADuC,GAEvC,cAFJ;EAIA,oBACE;IAAM,QAAQ,EAAEP,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAEQ,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,GAAG,EAAEH,YADP;QAEE,IAAI,EAAC,MAFP;QAGE,EAAE,EAAC,MAHL;QAIE,QAAQ,EAAEX,sBAJZ;QAKE,MAAM,EAAEK,oBALV;QAME,KAAK,EAAEb;MANT;QAAA;QAAA;QAAA;MAAA,QAFF,EAUGqB,kBAAkB,iBAAI;QAAG,SAAS,EAAC,YAAb;QAAA,UAA2BjB;MAA3B;QAAA;QAAA;QAAA;MAAA,QAVzB;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAaE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAbF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAmBD,CAhED;;GAAMN,W;;KAAAA,W;AAkEN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}