{"ast":null,"code":"var _jsxFileName = \"/Users/kevinbenelli/Desktop/ReactJS/udemy-reactjs/ReactJS-Course-Git-Repo/ReactMeals/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n\n  if (action.type === \"ADD\") {\n    // Step 1: look for already existing item\n    const existingCartItemIndex = state.items.findIndex(item => {\n      return item.id === action.item.id;\n    }); // Step 2: check index for existing item\n\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems; // Step 3: If item already exists then update the amount\n\n    if (existingCartItem) {\n      let updatedItem;\n      updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount // existing amount + current incoming amount\n\n      };\n      updatedItems = [...state.items]; // create new array and copy existing objects (without editing old array)\n\n      updatedItems[existingCartItemIndex] = updatedItem; // override index with updated item\n    } else {\n      // if item is added for the first time to item array\n      updatedItems = state.items.concat(action.item); // add the item to array\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    // grab the prev amount\n    // update prev amount with decrement value\n    console.log(\"BRUH: \"); // Step 1: look for already existing item\n\n    const existingCartItemIndex = state.items.findIndex(item => {\n      return item.id === action.item.id;\n    });\n    const existingItem = state.items[existingCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItems;\n\n    if (existingItem.amount === 1) {\n      updatedItems = state.filter(item => {\n        return item.id !== action.id;\n      });\n    } else {\n      const updatedItem = { ...existingItem.amount,\n        amount: existingItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItem] = updatedItem;\n    } // graph the value of the item to be removed\n\n\n    const existingCartItem = state.items[action.id]; // Step 2: update the amount considering item removal\n\n    let updatedItem = { ...existingCartItem,\n      amount: existingCartItem.amount - 1\n    }; // Step 3: copy updated items after removal\n\n    updatedItems = [...state.items];\n    updatedItems[existingCartItem] = updatedItem;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    // forward item to item in reducer\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    }); // this is the action obj, action.item / action.type\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/kevinbenelli/Desktop/ReactJS/udemy-reactjs/ReactJS-Course-Git-Repo/ReactMeals/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","updatedTotalAmount","item","price","amount","type","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","console","log","existingItem","filter","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import { useReducer } from \"react\";\n\nimport CartContext from \"./cart-context\";\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\n\nconst cartReducer = (state, action) => {\n  const updatedTotalAmount =\n    state.totalAmount + action.item.price * action.item.amount;\n\n  if (action.type === \"ADD\") {\n    // Step 1: look for already existing item\n    const existingCartItemIndex = state.items.findIndex((item) => {\n      return item.id === action.item.id;\n    });\n\n    // Step 2: check index for existing item\n    const existingCartItem = state.items[existingCartItemIndex];\n\n    let updatedItems;\n\n    // Step 3: If item already exists then update the amount\n    if (existingCartItem) {\n      let updatedItem;\n      updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount, // existing amount + current incoming amount\n      };\n\n      updatedItems = [...state.items]; // create new array and copy existing objects (without editing old array)\n      updatedItems[existingCartItemIndex] = updatedItem; // override index with updated item\n    } else {\n      // if item is added for the first time to item array\n\n      updatedItems = state.items.concat(action.item); // add the item to array\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount,\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    // grab the prev amount\n    // update prev amount with decrement value\n    console.log(\"BRUH: \");\n\n    // Step 1: look for already existing item\n    const existingCartItemIndex = state.items.findIndex((item) => {\n      return item.id === action.item.id;\n    });\n\n    const existingItem = state.items[existingCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n\n    let updatedItems;\n\n    if (existingItem.amount === 1) {\n      updatedItems = state.filter((item) => {\n        return item.id !== action.id;\n      });\n    } else {\n      const updatedItem = {\n        ...existingItem.amount,\n        amount: existingItem.amount - 1,\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItem] = updatedItem;\n    }\n    // graph the value of the item to be removed\n    const existingCartItem = state.items[action.id];\n    // Step 2: update the amount considering item removal\n    let updatedItem = {\n      ...existingCartItem,\n      amount: existingCartItem.amount - 1,\n    };\n    // Step 3: copy updated items after removal\n    updatedItems = [...state.items];\n    updatedItems[existingCartItem] = updatedItem;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount,\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = (props) => {\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n\n  const addItemToCartHandler = (item) => {\n    // forward item to item in reducer\n    dispatchCartAction({ type: \"ADD\", item: item }); // this is the action obj, action.item / action.type\n  };\n\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction({ type: \"REMOVE\", id: id });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"]},"metadata":{},"sourceType":"module"}